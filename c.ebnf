C99 EBNF

TERMINALS:
    KW_AUTO = "auto"
    KW_BREAK = "break"
    KW_CASE = "case"
    KW_CHAR = "char"
    KW_CONST = "const"
    KW_CONTINUE = "continue"
    KW_DEFAULT = "default"
    KW_DO = "do"
    KW_DOUBLE = "double"
    KW_ELSE = "else"
    KW_ENUM = "enum"
    KW_EXTERN = "extern"
    KW_FLOAT = "float"
    KW_FOR = "for"
    KW_GOTO = "goto"
    KW_IF = "if"
    KW_INLINE = "inline"
    KW_INT = "int"
    KW_LONG = "long"
    KW_REGISTER = "register"
    KW_RESTRICT = "restrict"
    KW_RETURN = "return"
    KW_SHORT = "short"
    KW_SIGNED = "signed"
    KW_SIZEOF = "sizeof"
    KW_STATIC = "static"
    KW_STRUCT = "struct"
    KW_SWITCH = "switch"
    KW_TYPEDEF = "typedef"
    KW_UNION = "union"
    KW_UNSIGNED = "unsigned"
    KW_VOID = "void"
    KW_VOLATILE = "volatile"
    KW_WHILE = "while"
    KW_BOOL = "_Bool"
    KW_COMPLEX = "_Complex"
    KW_IMAGINARY = "_Imaginary"
    KW_PERIOD = "."
    KW_COMMA = ","
    KW_COLON = ":"
    KW_APOSTROPHE = "'"
    KW_QUOTE = """

    hexadecimal_prefix ::= "0x" | "0X";
    nonzero-digit ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
    digit ::= "0" | nonzero-digit;
    nondigit ::= "_" | "a".."z" | "A".."Z";
    octal_digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7";
    hexadecimal-digit ::= digit | "a".."f" | "A".."F";
    unsigned-suffix ::= "u" | "U";
    long-suffix ::= "l" | "L";
    long-long-suffix ::= "ll" | "LL";
    sign ::= "+" | "-";
    floating-suffix ::= "fl" | "FL";
    new-line ::= "\r\n" | "\n" | "\r";


NONTERMINALS:

token ::= keyword | identifier | constant | string-literal | punctuator;

preprocessing_token ::= header-name | identifier | pp-number 
                    | character-constant | string-literal | punctuator 
                    | non-whitespace-char;
keyword ::= KW_AUTO | KW_BREAK | KW_CASE | KW_CHAR | KW_CONST | KW_CONTINUE
        | KW_DEFAULT | KW_DO | KW_DOUBLE | KW_ELSE | KW_ENUM | KW_EXTERN
        | KW_FLOAT | KW_FOR | KW_GOTO | KW_IF | KW_INLINE | KW_INT | KW_LONG
        | KW_REGISTER | KW_RESTRICT | KW_RETURN | KW_SHORT | KW_SIGNED
        | KW_SIZEOF | KW_STATIC | KW_STRUCT | KW_SWITCH | KW_TYPEDEF 
        | KW_UNION | KW_UNSIGNED | KW_VOID | KW_VOLATILE | KW_WHILE
        | KW_BOOL | KW_COMPLEX | KW_IMAGINARY;

identifier ::= identifier-nondigit, {nondigit | digit}

identifier-nondigit ::= nondigit | universal-character-name;

universal-character-name ::= "\u" hex-quad | "\U" hex-quad hex-quad;

hex-quad ::= hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit;

constant ::= integer-constant | floating-constant | enumeration-constant 
        | character-constant;

integer-constant ::= decimal-constant [integer-suffix]
                | octal-constant [integer-suffix]
                | headecimal-constant [integer-suffix];

decimal-constant ::= nonzero-digit | decimal-constant digit ;

octal-constant ::= "0" | octal-constant octal-digit;

hexadecimal-constant ::= hexadecimal-prefix hexadecimal-digit
                    | hexadecimal-constant hexadecimal-digit;

integer-suffix ::= unsigned-suffix [long-suffix] 
                | unsigned-suffix long-long-suffix
                | long-suffix [unsigned-suffix]
                | long-long-suffix [unsigned-suffix];
    

floating-constant ::= decimal-floating-constant 
                | hexadecimal-floating-constant;

decimal-floating-constant ::= 
                    fractional-constant [exponent-part] [floating-suffix] |
                    digit-sequence exponent-part [floating-suffix];
    
hexadecimal-floating-constant ::=
                    hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part [floating-suffix]
                    | hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part [floating-suffix]

fractional-constant ::= [digit-sequence] KW_PERIOD digit-sequence
                    | digit-sequence KW_PERIOD;

exponent-part ::= ("e" | "E") [sign] digit-sequence;

digit-sequence ::= digit, {digit}

hexadecimal-fractional-constant ::= [hexadecimal-digit-sequence], KW_PERIOD, hexadecimal-digit-sequence
    | hexadecimal-digit-sequence, KW_PERIOD;

binary-exponent-part ::= ("p" | "P") [sign] digit-sequence;

hexadecimal-digit-sequence ::= hexadecimal-digit 
                | hexadecimal-digit-sequence hexadecimal-digit;

enumeration-constant ::= identifier;

character-constant ::= KW_APOSTROPHE, c-char-sequence, KW_APOSTROPHE
        | "L", KW_APOSTROPHE, c-char-sequence, KW_APOSTROPHE;
    
c-char-sequence ::= c-char {c-char};

c-char ::=  anything but KW_APOSTROPHE, "\", new-line
    | escape-sequence;

escape-sequence ::= simple-escape-sequence | octal-escape-sequence 
                | hexadecimal-escape-sequence | universal-character-name;

simple-escape-sequence ::= "\'" | "\"" | "\?" | "\\" | "\a" | "\b" | "\f"
                        | "\n" | "\r" | "\t" | "\v";

octal-escape-sequence ::= "\", octal-digit, {octal-digit} * 2;

hexadecimal-escape-sequence ::= "\x", hexadecimal-digit
                        | hexadecimal-escape-sequence, hexadecimal-digit;

string-literal ::= ["L"], KW_QUOTE, [s-char-sequence], KW_QUOTE;

s-char-sequence ::= s-char, {s-char};

s-char ::= anything but KW_QUOTE, "\", new-line
        | escape-sequence;
    
punctuator ::= "[" | "]" | "(" | ")" | "{" | "}" | "." | "->" | "++" | "--"
        | "&" | "*" | "+" | "-" | "~" | "!" | "/" | "%" | "<<" | ">>" | "<"
        | ">" | "<=" | ">=" | "==" | "!=" | "^" | "&&" | "||" | "?" | ":" |
        | ";" | "..." | "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<="
        | ">>=" | "&=" | "^=" | "|=" | "," | "#" | "##" | "<:" | ":>" | "<%"
        | "%>" | "%:" | "%:%:";
    
header-name ::= "<", h-char-sequence, ">" 
            | KW_QUOTE, q-char-sequence, KW_QUOTE;
    
h-char-sequence ::= h-char {h-char};
    
h-char ::= <any character except newline and ">" >
    
q-char-sequence ::= q-char {q-char};

q-char ::= <any char except newline and ">
    
pp-number ::= (digit | KW_PERIOD), digit 
    | pp-number, ( digit | indentifier-nondigit)
    | pp-number, ( "e" | "E" | "p" | "P" ), sign
    | pp-number, KW_PERIOD;
    
primary-expression ::= indentifier | constant | string-literal
    | "(", expression, ")";

postfix-expression ::= primary-expression
    | postfix-expression, "[", expression, "]"
    | postfix-expression, "(", [argument-expression-list] ")"
    | postfix-expression, ( KW_PERIOD | "->" ), identifier
    | postfix-expression, ( "++" | "--")
    | "(", type-name, ")", "{", initializer-list, [","], "}";
    
argument-expression-list ::= {argument-expression-list, KW_PERIOD} * 1,  assignment-expression;

unary-expression ::= postfix-expression 
    | ("++" | "--" | KW_SIZEOF), unary-expression
    | unary-operator, cast-expression
    | "sizeof", "(", type-name, ")";

unary-operator ::= "&" | "*" | "+" | "-" | "~" | "!";
  
cast-expression ::= unary-expression | "(", type-name, ")", cast-expression;
    
multiplicative-expression ::= case-expression
    | multiplicative-expression, "*" | "/" | "%", cast-expression;
    
additive-expression ::= {additive-expression, "+" | "-"} * 1,  multiplicative-expression;
    
shift-expression ::= {shift-expression, "<<" | ">>" } * 1, additive-expression;
    
relational-expression ::= {relational-expression, "<" | ">" | "<=" | ">=" } * 1, shift-expression;
    
equality-expression ::= {equality-expression, "==" | "!=" } * 1, relational-expression;

AND-expression ::= {AND-expression, "&"} * 1, equality-expression;

exclusive-OR-expression ::= {exclusive-OR-expression, "^"} * 1, AND-expression;
    
inclusive-OR-expression ::= {inclusive-OR-expression, "|"} * 1, exclusive-OR-expression;

logical-AND-expression ::= {logical-AND-expression, "&&"} * 1, inclusive-OR-expression;
    
logical-OR-expression ::= {logical-OR-expression, "||"} * 1, logical-AND-expression;

conditional-expression ::= logical-OR-expression
    | logical-OR-expression "?" expression ":" conditional-expression;
    
assignment-expression ::= conditional-expression
            | unary-expression, assignment-operator, assignment-expression;

assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" 
                    | ">>=" | "&=" | "^=" | "|=";

expression ::= {expression, KW_COMMA} * 1, assignment-expression;

constant-expression ::= conditional-expression;
    
declaration ::= declaration-specifiers, [init-declarator-list], ";";

declaration-specifiers ::= storage-class-specifier, [declaration-specifiers]
                | type-specifier, [declaration-specifiers]
                | type-qualifier, [declaration-specifiers]
                | KW_INLINE, [declaration-specifiers];

init-declarator-list ::= {init-declarator, KW_COMMA} * 1, init-declarator;

init-declarator ::= declarator ["=", initializer];
    
storage-class-specifier ::= KW_TYPEDEF | KW_EXTERN | KW_STATIC | KW_AUTO
                    | KW_REGISTER;

type-specifier ::= KW_VOID | KW_CHAR | KW_SHORT | KW_INT | KW_LONG | KW_FLOAT
                | KW_DOUBLE | KW_SIGNED | KW_UNSIGNED | KW_BOOL | KW_COMPLEX
                | struct-or-union-specifier | enum-specifier | typedef-name;
    
struct-or-union-specifier ::= 
    struct-or-union, [identifer, {struct-declaration-list}];

struct-or-union ::= KW_STRUCT | KW_UNION;

struct-declaration-list ::= [struct-declaration-list], struct-declaration;
    
struct-declaration ::= specifier-qualifier-list, struct-declarator-list, ";";
    
specifier-qualifier-list ::= type-specifier, [specifier-qualifier-list]
                        | type-qualifier, [specifier-qualifier-list];
    
struct-declarator-list ::= [struct-declarator-list, KW_COMMA] struct-declarator;
    
struct-declarator ::= declarator | [declarator], KW_COLON constant-expression;

enum-specifier ::= KW_ENUM, [identifier], "{", enumerator-list, [KW_COMMA], "}"
                | KW_ENUM, [identifier];

enumerator-list ::= {enumerator, KW_COMMA}, enumerator;

enumerator ::= enumeration-constant, ["=", constant-expression];
    
type-qualifier ::= KW_CONST | KW_RESTRICT | KW_VOLATILE;

declarator ::= [pointer] direct-declarator;

direct-declarator ::= identifier
    | "(", declarator, ")"
    | direct-declarator, "[", [type-qualifier-list] [assignment-expression] "]"
    | direct-declarator, "[", "static" [type-qualifier-list] assignment-expression "]"
    | direct-declarator, "[", type-qualifier-list, "static", assignment-expression, "]"
    | direct-declarator, "[", [type-qualifier-list], "*", "]"
    | direct_declarator, "(", parameter-type-list, ")"
    | direct-declarator, "(", [identifier-list], ")";

pointer ::= "*", [type-qualifier-list] | "*", [type-qualifier-list], pointer;

type-qualifier-list ::= [type-qualfifier-list], type-qualifier;

parameter-type-list ::= parameter-list, [KW_COMMA, "..."];

parameter-list ::= [parameter-list KW_COMMA], parameter-declaration;
    
parameter-declaration ::= declaration-specifiers, declarator
            | declaration-specifiers, [abstract-declarator];

identifier-list ::= [identifier-list, KW_COMMA], identifier;

type-name ::= specifier-qualifier-list, [abstract-declarator];

abstract-declarator ::= pointer, | [pointer], direct-abstract-declarator;

direct-abstract-declarator ::= "(", abstract-declarator, ")"
    | [direct-abstract-declarator], "[", [assignment-expression] "]"
    | [direct-abstract-declarator], "[", "*", "]"
    | [direct-abstract-declarator], "(", [parameter-type-list] ")";

typedef-name ::= identifier;

initializer ::= assignment-expression | "{", initializer-list, [KW_COMMA], "}";
    
initializer-list ::= [designation], initializer
    | initializer-list, KW_COMMA, [designation], initializer;
    
designation ::= designator-list, "=";

designator-list ::= [designator-list], designator;

designator ::= "[", constant-expression, "]" | KW_PERIOD, identifier;
    
statement ::= labeled-statment | compound-statement | expression-statement
    | selection-statement | iteration-statement | jump-statement;
        
labeled-statement ::= identifier, KW_COLON, statement
    | KW_CASE, constant-expression, KW_COLON, statement
    | KW_DEFAULT, KW_COLON, statement;

compound-statement ::= "{", [block-item-list], "}";

block-item-list ::= [block-itemlist], block-item;
    
block-item ::= declaration | statement;
    
expression-statement ::= [expression], ";"
    
selection-statement ::= KW_IF, "(", expression, ")", statement, [KW_ELSE, statement],
                    | KW_SWITCH "(" expression ")" statement;

iteration-statement ::= KW_WHILE "(" expression ")" statement
    | KW_DO statement KW_WHILE "(" expression ")" ";"
    | KW_FOR "(" [declaration] [expression] ";" [expression] ";" [expression] ")"; statement

jump-statement ::= KW_GOTO, identifier, ";"
    | KW_CONTINUE, ";"
    | KW_BREAK, ";"
    | KW_RETURN, [expression], ";";

translation-unit ::= [translation-unit], external-declaration;

external-declaration ::= function-definition | declaration;

function-definition ::= declaration-specifiers, declarator, [declaration-list] compound-statement;

declaration-list ::= [declaration-list], declaration;

preprocessing-file ::= [group];

group ::= [group] | group-part;
    
group-part ::= if-section | control-line | text-line | "#", non-directive;

if-section ::= if-group, [elif-groups], [else-group], endif-line;

if-group ::= "#", "if", constant-expression, new-line [group]
        | "#", "ifdef", indentifier, new-line, [group]
        | "#", "ifndef", identifier, new-line, [group];

elif-groups ::= {elif-group};

elif-group ::= "#", "elif", constant-expression, new-line, [group];

else-group ::= "#", KW_ELSE, new-line, [group];

endif-line ::= "#", "endif", new-line;

control-line ::= "#", "include", pp-tokens, new-line
    | "#", "define", identifier, replacement-list, new-line
    | "#", "define", identifier, lparen, [identifier-list], ")", replacement-list, new-line
    | "#", "define", identifier, lparen, [identifier-list, KW_COMMA] "...", ")", replacement-list, new-line
    | "#", "undef", indentifier, new-line
    | "#", "line", pp-tokens, new-line
    | "#", "error", [pp-tokens], new-line
    | "#", "pragma", [pp-tokens], new-line
    | "#", new-line;

text-line ::= [pp-tokens] new-line;

non-directive ::= pp-tokens, new-line;

lparen ::=  "(" <but without preceeding whitespace>

replacement-list ::= [preprocessing-token {preprocessing-token}];

